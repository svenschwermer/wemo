#!/bin/bash
#
# Deal with inconsistencies of Seedonk NetCam SDKs.  We currently
# have 2 (soon to be 3) SDKs with different embedded directory names:
: '
 +-------------+---------------------------------+-----------------+------------+
 |    SDK      |             Archive             | Extracted Name  |Desired Name|
 +-------------+---------------------------------+-----------------+------------+
 | NetCam      | sdkNetCam-20140311.tar.gz       | sdkNetCam       | NetCam_SDK |
 +-------------+---------------------------------+-----------------+------------+
 | HD V1       | sdkNetCamHDv1-20150311.tar.gz   | sdkNetCamHDv1   | NetCam_SDK |
 +-------------+---------------------------------+-----------------+------------+
 | HD V2       | sdkNetCamHDv2-20150313.tar.gz	 | sdkNetCamHDv2   | NetCam_SDK |
 | LS WNC      |                                 |                 |            |
 +-------------+---------------------------------+-----------------+------------+
'
# Note that this program will refuse to run if the destination
# directory already exists.

# $Id: install_netcam_sdk 4645 2014-03-25 20:21:22Z darrell.shively $

usage() {
    PROGNAME=$(basename $0)
    printf "Usage: %s [-d] [-i{y|n}] [-f{y|n}] [-p{y|n}] [-v] [-h] {SDK}\n" "$PROGNAME"
    echo "Where:"
    printf "  -d\tDebug\n"
    printf "  -i\tY or N: Install SDK.  Default is Y.\n"
    printf "  -p\tY or N: Whether to apply patches to the extracted SDK (if available).\n"
    printf "    \tDefault is Y.\n"
    printf "  -f\tY or N: Whether to apply vendor fix to the extracted SDK (if available).\n"
    printf "    \tDefault is Y.\n"
    printf "  -v\tVersion\n"
    printf "  -h\tThis help\n"
    printf "  SDK\tAn SDK flavor, one of NetCam, HD_V1, HD_V2, LS or LSO\n"
}

# SDK flavor invariant definitions
HERE_DIR="$(dirname $0)"
# The directory containing the SDK archives.  The cd & echo is to
# normalize out the repeated ..'s.
SDK_SRC_DIR="$(cd ${HERE_DIR}/../../../dl && echo $PWD)"
# The directory to will contain unpacked SDKs
SDK_DEST_DIR="${HERE_DIR}/../../../build_dir"
# Desired SDK directory name
DESIRED_SDK_DIR_NAME="NetCam_SDK"
SDK_DOWNLOAD_URL="https://li-epssvn-prod-01.belkin.com/wemo/netcam/"

# Set defauls
INSTALLIT="y"
PATCHIT="y"
FIXIT="y"
DEBUG=

# Placeholder for echo command
ECHO=""

downCase() {
    echo $1 | tr "[:upper:]" "[:lower:]"
}

illegalOptionValue() {
    printf "Illegal value for -%s option: \"%s\".\n" "$1" "$2" >&2
    usage
    exit 1
}

while getopts ":dvhi:f:p:" opt; do
    case $opt in
	d) # Debug mode
	   DEBUG=1
	   ECHO="echo"
	   echo "Debugging ON"
	   ;;
	p) # Choose patching option
	   case $OPTARG in
	       y|Y|n|N)
	         PATCHIT=$(downCase $OPTARG)
		 ;;
	       *)
	         illegalOptionValue "$opt" "$OPTARG"
		 ;;
	   esac
	   ;;
	f) # Choose fixing option
	   case $OPTARG in
	       y|Y|n|N)
	         FIXIT=$(downCase $OPTARG)
		 ;;
	       *)
	         illegalOptionValue "$opt" "$OPTARG"
		 ;;
	   esac
	   ;;
	i) # Install or no?
	   case $OPTARG in
	       y|Y|n|N)
	         INSTALLIT=$(downCase $OPTARG)
		 ;;
	       *)
	         illegalOptionValue "$opt" "$OPTARG"
		 ;;
	   esac
	   ;;
	h) # Show help
	   usage
	   exit 0
	   ;;
	v) # Give version
	   echo "Version $(echo '$Rev: 4645 $' | cut -f2 -d\  )"
	   exit 0
	   ;;
	\?)
	   echo "Invalid option: -$OPTARG" >&2
	   usage
	   exit 1
	   ;;
	:)
	
	   echo "Option -${OPTARG} needs an argument." >&2
	   usage
	   exit 1
	   ;;
    esac
done

shift $((OPTIND-1))

if [ $# -ne 1 ]; then
   echo "Invalid or missing parameters" >&2
   usage
   exit 1
fi

SDK=$1

case $SDK in
    sd) # Original non-HD netcam
       [ -n "$DEBUG" ] && echo "Basic install"
       #ARCHIVE="sdkNetCam-20131126.tar.gz"
       ARCHIVE="sdkNetCam-20140311.tar.gz"
       EXTRACTED_SDK_DIR_NAME="sdkNetCam"
       SDK_FIX_ARCHIVE="${HERE_DIR}/netcam-motion-fix-patch-20140307.tar.gz"
       SDK_FIX_DEST="user/goahead/src"
       ;;
    hdv1) # Version 1 HD Netcam
       [ -n "$DEBUG" ] && echo "HD v1"
       ARCHIVE="sdkNetCamHDv1-20150311.tar.gz"
       EXTRACTED_SDK_DIR_NAME="sdkNetCamHDv1"
#      SDK_FIX_ARCHIVE="${HERE_DIR}/hdv1-motion-fix-patch-20140307.tar.gz"
#      SDK_FIX_DEST="user/goahead/src"
       ;;
    hdv2|ls) # Version 2 HD Netcam & LS WNC share SDK
       [ -n "$DEBUG" ] && echo "$SDK"
       ARCHIVE="sdkNetCamHDv2-20150313.tar.gz"
       EXTRACTED_SDK_DIR_NAME="sdkNetCamHDv2"
       ;;
    LSO) # Linksys camera (outdoor)
       echo "Linksys Outdoor camera support coming soon" >&2
       exit 1
       ;;
    *)
       echo "Invalid SDK type" >&2
       Usage
       exit 1
       ;;
esac

# Install vendor SDK
installSDK() {
    # download SDK if it isn't already downloaded.
    if [ ! -e "${SDK_SRC_DIR}/${ARCHIVE}" ]; then
	echo "Downloading netcam SDK ${ARCHIVE} from ${SDK_DOWNLOAD_URL}..."
	wget --no-check-certificate ${SDK_DOWNLOAD_URL}/${ARCHIVE} --output-document=${SDK_SRC_DIR}/${ARCHIVE}
    fi

    # Make sure an SDK isn't already installed
    echo "SDK destdir = ${SDK_DEST_DIR}/${DESIRED_SDK_DIR_NAME} "
    if [ -e "${SDK_DEST_DIR}/${DESIRED_SDK_DIR_NAME}" ]; then
	printf "SDK already installed; skipping\n"
	exit 0
    fi

    if [ -n "${DEBUG}" ]
	then
	printf "Would extract %s/%s to %s/%s using command:\n" \
	    "${SDK_SRC_DIR}" \
	    "${ARCHIVE}"     \
	    "${SDK_DEST_DIR}" \
	    "${DESIRED_SDK_DIR_NAME}"
    fi

    ${ECHO} tar --extract --gunzip \
	--file ${SDK_SRC_DIR}/${ARCHIVE}    \
	--directory ${SDK_DEST_DIR}         \
	--transform="s,${EXTRACTED_SDK_DIR_NAME}/,${DESIRED_SDK_DIR_NAME}/,"

    # Unfortunately, even when specifying a transform tar will create the embedded
    # directory name.  We need to remove that.
    if [ -z "${DEBUG}" -a "${EXTRACTED_SDK_DIR_NAME}" != "${DESIRED_SDK_DIR_NAME}" ]; then
	rmdir ${SDK_DEST_DIR}/${EXTRACTED_SDK_DIR_NAME}
    fi
}

# Install custom SDK changes if present
patchSDK() {
    # Compile name of appropriate patch file for this SDK
    SDK_PATCH_NAME="${HERE_DIR}/${SDK}-patches.tgz"
    if [ -e ${SDK_PATCH_NAME} ]; then
	${ECHO} tar --extract --gunzip --file ${SDK_PATCH_NAME} \
	    --directory ${SDK_DEST_DIR}/${DESIRED_SDK_DIR_NAME}
	# correct user permissions
	chown -R $USER ${SDK_DEST_DIR}/${DESIRED_SDK_DIR_NAME}

    else
	echo "Skipping SDK patching; no patch file present"
    fi

}

# Install extra fix.  Sometimes Seedonk misses something and sends us
# a supplemental tar file.  If so, the env var SDK_FIX_ARCHIVE will be
# set along (possibly) with SDK_FIX_DEST.  SDK_FIX_ARCHIVE is just the
# name of a .tgz archive.  SDK_FIX_DEST is an optional location
# relative to the unpacked SDK root.
fixSDK() {
    # Don't bother if no SDK_FIX_ARCHIVE
    if [ -n "$SDK_FIX_ARCHIVE" -a -e "${SDK_FIX_ARCHIVE}" ]; then
	${ECHO} tar --extract --gunzip --file ${SDK_FIX_ARCHIVE} \
	    --directory ${SDK_DEST_DIR}/${DESIRED_SDK_DIR_NAME}/${SDK_FIX_DEST}
    fi
}


# Install if desired
if [ "${INSTALLIT}" == "y" ]; then
    [ -n "${DEBUG}" ] && echo "Would install SDK"
    installSDK
else
    [ -n "${DEBUG}" ] && echo "Skipping SDK installation at user request"
fi


# If there is an available fixer archive AND the fixit flag is true...
if [ "${FIXIT}" == "y" ]; then
    [ -n "${DEBUG}" ] && echo "Would fix installed SDK"
    fixSDK
else
    [ -n "${DEBUG}" ] && echo "Skipping SDK fixing at user request"
fi


# Finally, if there is an available patch archive AND the patch flag is true...
if [ "${PATCHIT}" == "y" ]; then
    [ -n "${DEBUG}" ] && echo "Would patch installed SDK"
    patchSDK
else
    [ -n "${DEBUG}" ] && echo "Skipping SDK patching at user request"
fi

# -- End --
